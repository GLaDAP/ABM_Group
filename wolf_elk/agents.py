"""
GROUP: LIMPENS (9)
DATE: 18 January 2021
AUTHOR(S): Karlijn Limpens
           Joos Akkerman
           Guido Vaessen
           Stijn van den Berg
           David Puroja 
DESCRIPTION: 
"""
from mesa import Agent
from .walker import Walker

import random
import logging


class Elk(Walker):
    """
    A elk that walks around, reproduces (asexually) and gets eaten.
    """
    def __init__(self, unique_id, pos, model, moore, age, energy=None):
        """
        Create a Pack.
        Args:
            unique_id        (int): ID Generated by Mesa
            pos            (tuple): Tuple with the coordinates
            model     (mesa.Model): Model-object
            moore           (bool): Use Moore Neighborhood
            age              (int): Age
            energy           (int): Initial energy level
        """
        super().__init__(unique_id, pos, model, moore=moore)
        self.energy = energy
        self.age = age

    def step(self):
        """
        A model step. Move, then eat grass and reproduce.
        """
        self.random_move()
        self.age += 1 / 26
        self.energy -= 1

        # If there is grass available, eat it
        this_cell = self.model.grid.get_cell_list_contents([self.pos])
        grass_patch = [
            obj for obj in this_cell if isinstance(obj, GrassPatch)
        ][0]
        if grass_patch.fully_grown:
            self.energy += self.model.elk_gain_from_food
            grass_patch.fully_grown = False

        # Death
        if self.energy < 0:
            self.model.grid._remove_agent(self.pos, self)
            self.model.schedule.remove(self)

        if self.random.random() < self.compute_reproduction_prob():
            # Create a new Elk:
            self.energy /= 2
            calf = Elk(
                self.model.next_id(),
                self.pos,
                self.model,
                self.moore,
                0,
                self.energy
            )
            self.model.grid.place_agent(calf, self.pos)
            self.model.schedule.add(calf)

    def compute_reproduction_prob(self):
        """
        Computes the probability of reproduction based on the age of the elk
        """
        degree = self.model.polynomial_degree
        return max(0,sum([self.model.elk_reproduction_params[i]*self.age**(degree-i) for i in range(degree+1)]))

    # Equality operators to overrule comparison in the heapq
    def __eq__(self, other):
        self.__class__ == other.__class__ and self.pos == other.pos

    def __lt__(self, other):
        return True


class GrassPatch(Agent):
    """
    A patch of grass that grows at a fixed rate and it is eaten by elk
    """

    def __init__(self, unique_id, pos, model, fully_grown, countdown):
        """
        Creates a new patch of grass

        Args:
            grown: (boolean) Whether the patch of grass is fully grown or not
            countdown: Time for the patch of grass to be fully grown again
        """
        super().__init__(unique_id, model)
        self.fully_grown = fully_grown
        self.countdown = countdown
        self.pos = pos

    def step(self):
        if not self.fully_grown:
            if self.countdown <= 0:
                # Set as fully grown
                self.fully_grown = True
                self.countdown = self.model.grass_regrowth_time
            else:
                self.countdown -= 1
