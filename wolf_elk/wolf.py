"""
GROUP: LIMPENS (9)
DATE: 18 January 2021
AUTHOR(S): Karlijn Limpens
           Joos Akkerman
           Guido Vaessen
           Stijn van den Berg
           David Puroja 
DESCRIPTION: 
"""
from mesa import Agent
from .walker import Walker
from .agents import Elk

import random
import logging


class Wolf(Walker):
    """
    A wolf that walks around, reproduces (asexually) and eats elk.
    """
    def __init__(self, unique_id, pos, model, moore, energy=None):
        """
        Create a Wolf.
        Args:
            unique_id        (int): ID Generated by Mesa
            pos            (tuple): Tuple with the coordinates
            model     (mesa.Model): Model-object
            moore           (bool): Whether the model uses Moore neighborhood.
            energy           (int): Initial energy
        """
        super().__init__(unique_id, pos, model, moore=moore)
        self.energy = energy
        self.kills = 0
        self.pack = False

    def filter_func(self, agents):
        """
        Filter wolves from list.
        Args:
            agents (list): The list of agents to filter.
        """
        return [
            agent for agent in agents if agent.energy < self.model.energy_threshold and not agent.pack
        ]

    def step(self):
        """
        Step function for the Wolf-object.
        """
        if (self.pack):
            # If part of a pack, the pack controls the Wolf and the rest is
            # skipped. The reason for this is that removing the wolf from the
            # scheduler gives iteration errors.
            return

        self.random_move()
        self.energy -= 1
        if self.energy < 20:
            """
            A wolf first tries to create a pack to hutn down an Elk.
            If that is not possible, a Wolf tries to kill the elk, but with
            a smaller probability of success.
            """
            agent = self.move_towards_own_kind(4, self.filter_func)
            if (agent):
                pack = Pack(
                    self.model.next_id(), self.pos, self.model, [], self.moore
                )
                self.model.schedule.add(pack)
                self.model.grid.place_agent(pack, pack.pos)
                pack.add_wolf_to_pack(agent)
                pack.add_wolf_to_pack(self)
                return
            else:
                # See if there are Elks available
                this_cell = self.model.grid.get_cell_list_contents([self.pos])
                elk = [obj for obj in this_cell if isinstance(obj, Elk)]

                if len(elk) > 0:
                    if (random.random() < 0.1):
                        elk_to_eat = self.random.choice(elk)
                        self.energy += self.model.wolf_gain_from_food

                        # Kill the elk
                        self.kills += 1
                        self.model.grid._remove_agent(self.pos, elk_to_eat)
                        self.model.schedule.remove(elk_to_eat)

        # Death or reproduction
        if self.energy < 0:
            self.death()
        else:
            if self.random.random() < self.model.wolf_reproduce:
                # Create a new wolf cub
                self.energy /= 2
                cub = Wolf(
                    self.model.next_id(),
                    self.pos,
                    self.model,
                    self.moore,
                    self.energy
                )
                self.model.grid.place_agent(cub, cub.pos)
                self.model.schedule.add(cub)

    def death(self):
        """
        Removes a dead wolf from the model.
        """
        logging.debug("Wolf died.")
        self.model.grid._remove_agent(self.pos, self)
        self.model.schedule.remove(self)

    # Equality operators to overrule comparison in the heapq
    def __eq__(self, other):
        self.__class__ == other.__class__ and self.pos == other.pos

    def __lt__(self, other):
        return True


class Pack(Walker):
    """
    Agent which holds a collection of wolves. Wolves are added to the pack and
    when the pack is large enough and finds an Elk, it eats and the pack is
    disbanded.
    """
    def __init__(self, unique_id, pos, model, wolves: list, moore: bool):
        """
        Create a Pack.
        Args:
            unique_id        (int): ID Generated by Mesa
            pos            (tuple): Tuple with the coordinates
            model     (mesa.Model): Model-object
            wolves          (list): List of Wolves initial
            moore           (bool): Whether the model uses Moore neighborhood.
        """
        super().__init__(unique_id, pos, model, moore=moore)
        self.wolves = wolves
        self.min_pack = 4
        for wolf in wolves:
            self.add_wolf_to_pack(wolf)

    def step(self):
        """
        Step function for the Pack.
        """
        logging.debug("Wolf pack size {}".format(len(self.wolves)))


        if (len(self.wolves) < self.min_pack):
            self.find_wolf_for_pack()
            logging.debug("Pack size below minimum")
        else:
            logging.debug("Pack up to size. Start searching for Elk.")
            if (self.move_towards_specified_kind(Elk, 2) is None):
                # No elk found, move random.
                self.random_move()


        # Check for elks in this cell grid. The pack already moved to this
        # cell containing an Elk.
        this_cell = self.model.grid.get_cell_list_contents([self.pos])
        elk = [obj for obj in this_cell if isinstance(obj, Elk)]

        if (len(elk) > 0 and len(self.wolves) >= 4):
            # Pack eats the elk, pack is going to disband.
            self.pack_has_eaten(elk)

        for wolf in self.wolves:
            wolf.energy -= 1
            if (wolf.energy < 0):
                logging.debug("Wolf died while in pack")
                wolf.pack = False
                self.wolves.remove(wolf)
                self.model.schedule.remove(wolf)
            if self.random.random() < self.model.wolf_reproduce:
                logging.debug("Wolf born in pack")
                wolf.energy /= 2
                cub = Wolf(
                    self.model.next_id(),
                    self.pos,
                    self.model,
                    self.moore,
                    wolf.energy
                )
                cub.pack = True
                self.model.schedule.add(cub)
                self.wolves.append(cub)

        if (len(self.wolves) < 2):
            logging.debug("Disbanding small pack")
            for wolf in self.wolves:
                self.remove_from_pack(wolf)
            self.model.grid._remove_agent(self.pos, self)
            self.model.schedule.remove(self)

    def filter_func_pack(self, packs):
        """
        Filter the list of packs.
        Args:
            packs (list): List of packs to filter.
        """
        return [pack for pack in packs if len(pack.wolves) < self.min_pack]

    def filter_wolves(self, agents):
        """
        Filter the list of wolves.
        Args:
            agents (list): List of wolf-agents to filter.
        """
        return [
            agent for agent in agents if agent.energy < 20 and not agent.pack
        ]

    def find_wolf_for_pack(self):
        """
        Find a wolf in the neighborhood.
        """
        agent = self.move_towards_specified_kind(Wolf, 4, self.filter_wolves)
        if (agent):
            logging.debug("Next wolf found is: {}".format(agent))
            logging.debug("Pack size is now {}".format(len(self.wolves)))
            self.add_wolf_to_pack(agent)
        else:
            self.find_pack_for_pack()

    def find_pack_for_pack(self):
        """
        Find a pack in the neighborhood.
        """
        pack = self.move_towards_specified_kind(Pack, 4, self.filter_func_pack)
        if (pack):
            logging.debug("Next pack found is: {}".format(pack))
            logging.debug("Pack size is now {}".format(len(self.wolves)))
            self.add_pack_to_pack(pack)

    def add_pack_to_pack(self, pack):
        """
        Add a pack to this pack and dissolve the other one.
        Args:
            pack (Agent): Pack-object to merge with this pack.
        """
        logging.debug("Merging packs")
        for wolf in pack.wolves:
            self.add_wolf_to_pack(wolf)
        logging.debug("Pack is now {} wolves".format(len(self.wolves)))
        self.model.schedule.remove(pack)
        self.model.grid._remove_agent(pack.pos, pack)

    def add_wolf_to_pack(self, wolf):
        """
        Add wolf to pack.
        Args:
            wolf (Agent): The Wolf-object to add to the pack.
        """
        # When a Wolf is part of a pack
        if (not wolf.pack):
            self.model.grid._remove_agent(wolf.pos, wolf)
            wolf.pack = True
        self.wolves.append(wolf)

    def remove_from_pack(self, wolf):
        """
        Remove wolf from this pack.
        Args:
            wolf (Agent): The Wolf agent to remove from the pack.
        """
        self.model.grid.place_agent(wolf, wolf.pos)
        wolf.pack = False
        self.wolves.remove(wolf)

    def pack_has_eaten(self, elk):
        """
        Pack has eaten. Add kills to wolf, add energy and disband the pack.
        Args:
            elk (Agent): The Elk-agent to eat.
        """
        elk_to_eat = self.random.choice(elk)
        # Remove elk
        self.model.grid._remove_agent(self.pos, elk_to_eat)
        self.model.schedule.remove(elk_to_eat)
        logging.debug('Pack has eated, disbanding.')
        for wolf in self.wolves:
            wolf.energy += self.model.wolf_gain_from_food
            wolf.kills += 1
            wolf.pack = False
            self.model.grid.place_agent(wolf, wolf.pos)
        # Remove pack from scheduler
        self.model.grid._remove_agent(self.pos, self)
        self.model.schedule.remove(self)

    # Equality operators to overrule comparison in the heapq.
    def __eq__(self, other):
        self.__class__ == other.__class__ and self.pos == other.pos

    def __lt__(self, other):
        return True
